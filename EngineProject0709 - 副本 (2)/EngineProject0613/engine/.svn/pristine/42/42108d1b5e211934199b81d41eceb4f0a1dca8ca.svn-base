#ifndef SHADER_H
#define SHADER_H

//#include <glad/glad.h>
//#include <GLES2/gl2.h>
//#include <glm/glm.hpp>

#include <string>
#include <fstream>
#include <sstream>
#include <iostream>
#include <map>
#include "Defines.h"
using namespace std;
#include "module.h"

class Shader
{
public:
	unsigned int ID;
	//create_shader_func cs_func;
	// constructor generates the shader on the fly
	// ------------------------------------------------------------------------
	map<ShaderType, unsigned int> m_Shaders;


	Shader()
	{

	}
	~Shader()
	{
	}
	void Release()
	{
	}
	virtual bool Load(const char* vertexPath, const char* fragmentPath, shader_helper* s_helper, const char* geometryPath = nullptr)
	{
		m_s_helper = s_helper;
		m_type = "1";
		// 1. retrieve the vertex/fragment source code from filePath
		std::string vertexCode;
		std::string fragmentCode;
		std::string geometryCode;
		std::ifstream vShaderFile;
		std::ifstream fShaderFile;
		std::ifstream gShaderFile;
		// ensure ifstream objects can throw exceptions:
		vShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		fShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		gShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		try
		{
			// open files
			vShaderFile.open(vertexPath);
			fShaderFile.open(fragmentPath);
			std::stringstream vShaderStream, fShaderStream;
			// read file's buffer contents into streams
			vShaderStream << vShaderFile.rdbuf();
			fShaderStream << fShaderFile.rdbuf();
			// close file handlers
			vShaderFile.close();
			fShaderFile.close();
			// convert stream into string
			vertexCode = vShaderStream.str();
			fragmentCode = fShaderStream.str();
			// if geometry shader path is present, also load a geometry shader
			if (geometryPath != nullptr)
			{
				gShaderFile.open(geometryPath);
				std::stringstream gShaderStream;
				gShaderStream << gShaderFile.rdbuf();
				gShaderFile.close();
				geometryCode = gShaderStream.str();
			}
		}
		catch (std::ifstream::failure e)
		{
			std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
			return false;
		}

		const char* vShaderCode = vertexCode.c_str();
		const char * fShaderCode = fragmentCode.c_str();
		//const char* vShaderCode = vShaderStr;
		//const char * fShaderCode = fShaderStr;
		// 2. compile shaders
		if (m_s_helper->c_s_func)
		{
			unsigned int id = m_s_helper->c_s_func(vShaderCode, fShaderCode);
			//m_Shaders.insert(NORMAL, ID);
			m_Shaders[NORMAL] = id;
		}
		return true;


	}

	virtual bool Load2(const char* vertexPath, const char* fragmentPath, shader_helper* s_helper, const char* geometryPath = nullptr)
	{
		m_s_helper = s_helper;
		m_type = "2";

		// 1. retrieve the vertex/fragment source code from filePath
		std::string vertexCode;
		std::string fragmentCode;
		std::string geometryCode;
		std::ifstream vShaderFile;
		std::ifstream fShaderFile;
		std::ifstream gShaderFile;
		// ensure ifstream objects can throw exceptions:
		vShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		fShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		gShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		try
		{
			// open files
			vShaderFile.open(vertexPath);
			fShaderFile.open(fragmentPath);
			std::stringstream vShaderStream, fShaderStream;
			// read file's buffer contents into streams
			vShaderStream << vShaderFile.rdbuf();
			fShaderStream << fShaderFile.rdbuf();
			// close file handlers
			vShaderFile.close();
			fShaderFile.close();
			// convert stream into string
			vertexCode = vShaderStream.str();
			fragmentCode = fShaderStream.str();
			// if geometry shader path is present, also load a geometry shader
			if (geometryPath != nullptr)
			{
				gShaderFile.open(geometryPath);
				std::stringstream gShaderStream;
				gShaderStream << gShaderFile.rdbuf();
				gShaderFile.close();
				geometryCode = gShaderStream.str();
			}
		}
		catch (std::ifstream::failure e)
		{
			std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
			return false;
		}


		const char* vShaderCode = vertexCode.c_str();
		const char * fShaderCode = fragmentCode.c_str();
		//const char* vShaderCode = vShaderStr;
		//const char * fShaderCode = fShaderStr;
		// 2. compile shaders
		if (m_s_helper->c_s_func)
		{
			unsigned int id = m_s_helper->c_s_func(vShaderCode, fShaderCode);
			m_Shaders[PHONG] = id;
		}
		return true;


	}

	virtual bool Load3(const char* vertexPath, const char* fragmentPath, shader_helper* s_helper, const char* geometryPath = nullptr)
	{
		m_s_helper = s_helper;
		m_type = "2";

		// 1. retrieve the vertex/fragment source code from filePath
		std::string vertexCode;
		std::string fragmentCode;
		std::string geometryCode;
		std::ifstream vShaderFile;
		std::ifstream fShaderFile;
		std::ifstream gShaderFile;
		// ensure ifstream objects can throw exceptions:
		vShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		fShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		gShaderFile.exceptions(std::ifstream::failbit | std::ifstream::badbit);
		try
		{
			// open files
			vShaderFile.open(vertexPath);
			fShaderFile.open(fragmentPath);
			std::stringstream vShaderStream, fShaderStream;
			// read file's buffer contents into streams
			vShaderStream << vShaderFile.rdbuf();
			fShaderStream << fShaderFile.rdbuf();
			// close file handlers
			vShaderFile.close();
			fShaderFile.close();
			// convert stream into string
			vertexCode = vShaderStream.str();
			fragmentCode = fShaderStream.str();
			// if geometry shader path is present, also load a geometry shader
			if (geometryPath != nullptr)
			{
				gShaderFile.open(geometryPath);
				std::stringstream gShaderStream;
				gShaderStream << gShaderFile.rdbuf();
				gShaderFile.close();
				geometryCode = gShaderStream.str();
			}
		}
		catch (std::ifstream::failure e)
		{
			std::cout << "ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ" << std::endl;
			return false;
		}


		const char* vShaderCode = vertexCode.c_str();
		const char * fShaderCode = fragmentCode.c_str();
		//const char* vShaderCode = vShaderStr;
		//const char * fShaderCode = fShaderStr;
		// 2. compile shaders
		if (m_s_helper->c_s_func)
		{
			unsigned int id = m_s_helper->c_s_func(vShaderCode, fShaderCode);
			m_Shaders[PHONG_TEX] = id;
		}
		return true;


	}


	// activate the shader
	// ------------------------------------------------------------------------


	void use(ShaderType type = NORMAL)
	{
		ID = m_Shaders[type];
		m_s_helper->u_s_func(m_Shaders[type]);

	}

	// utility uniform functions
	// ------------------------------------------------------------------------
	void setBool(const std::string &name, bool value) const
	{
		m_s_helper->s_s_bool_func(ID, name, value);
		//glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value);
	}
	// ------------------------------------------------------------------------
	void setInt(const std::string &name, int value) const
	{
		m_s_helper->s_s_int_func(ID, name, value);
		//glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
	}
	// ------------------------------------------------------------------------
	void setFloat(const std::string &name, float value) const
	{
		//int pos = t_helper->
		m_s_helper->s_s_float_func(ID, name, value);
		//glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
	}
	// ------------------------------------------------------------------------
	void setVec2_2(const std::string &name, const glm::vec2 &value) const
	{
		m_s_helper->s_s_vec2_func2(ID, name, value);
		//glUniform2fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec2(const std::string &name, float x, float y) const
	{
		m_s_helper->s_s_vec2_func(ID, name, x, y);
		//glUniform2f(glGetUniformLocation(ID, name.c_str()), x, y);
	}
	// ------------------------------------------------------------------------
	void setVec3_2(const std::string &name, const glm::vec3 &value) const
	{
		m_s_helper->s_s_vec3_func2(ID, name, value);
		//glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec3(const std::string &name, float x, float y, float z) const
	{
		m_s_helper->s_s_vec3_func(ID, name, x, y, z);
		//glUniform3f(glGetUniformLocation(ID, name.c_str()), x, y, z);
	}
	// ------------------------------------------------------------------------
	void setVec4_2(const std::string &name, const glm::vec4 &value) const
	{
		m_s_helper->s_s_vec4_func2(ID, name, value);
		//glUniform4fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
	}
	void setVec4(const std::string &name, float x, float y, float z, float w)
	{
		m_s_helper->s_s_vec4_func(ID, name, x, y, z, w);
		//glUniform4f(glGetUniformLocation(ID, name.c_str()), x, y, z, w);
	}
	// ------------------------------------------------------------------------
	void setMat2(const std::string &name, const glm::mat2 &mat) const
	{
		m_s_helper->s_s_mat2_func(ID, name, mat);
		//glUniformMatrix2fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}
	// ------------------------------------------------------------------------
	void setMat3(const std::string &name, const glm::mat3 &mat) const
	{
		m_s_helper->s_s_mat3_func(ID, name, mat);
		//glUniformMatrix3fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}
	// ------------------------------------------------------------------------
	void setMat4(const std::string &name, const glm::mat4 &mat) const
	{
		m_s_helper->s_s_mat4_func(ID, name, mat);
		//glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
	}

	void set_shader_helper(shader_helper* s_helper)
	{
		m_s_helper = s_helper;
	}

	shader_helper* m_s_helper;

	string m_type;

private:
	// utility function for checking shader compilation/linking errors.
	// ------------------------------------------------------------------------
	/*void checkCompileErrors(GLuint shader, std::string type)
	{
	GLint success;
	GLchar infoLog[1024];
	if (type != "PROGRAM")
	{
	glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
	if (!success)
	{
	glGetShaderInfoLog(shader, 1024, NULL, infoLog);
	std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
	}
	}
	else
	{
	glGetProgramiv(shader, GL_LINK_STATUS, &success);
	if (!success)
	{
	glGetProgramInfoLog(shader, 1024, NULL, infoLog);
	std::cout << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
	}
	}
	}*/
};






class BoundShaer : public Shader
{
public:
	BoundShaer(const char* vertexPath, const char* fragmentPath, shader_helper* s_helper)
	{
		this->m_s_helper = s_helper;
		Load("", "", s_helper);
	}
	~BoundShaer()
	{
	}

	bool Load(const char* vertexPath, const char* fragmentPath, shader_helper* s_helper, const char* geometryPath = nullptr)
	{
		char vShaderStr[] =
			"attribute vec3  aPos;    \n"

			"uniform mat4 model; \n"
			"uniform mat4 view; \n"
			"uniform mat4 projection; \n"

			"void main()                  \n"
			"{                            \n"

			" gl_Position = projection * view * model * vec4(aPos, 1.0); \n"
			"}                            \n";

		char fShaderStr[] =
			"precision mediump float;\n"


			"void main()                                  \n"
			"{                                            \n"
			"  gl_FragColor = vec4 ( 0.0, 1.0, 0.0, 1.0 ); \n"
			"}                                            \n";
		//const char* vShaderCode = vertexCode.c_str();
		//const char * fShaderCode = fragmentCode.c_str();
		const char* vShaderCode = vShaderStr;
		const char * fShaderCode = fShaderStr;
		// 2. compile shaders
		if (m_s_helper->c_s_func)
		{
			ID = m_s_helper->c_s_func(vShaderCode, fShaderCode);
		}
		return true;
	}
};


#endif