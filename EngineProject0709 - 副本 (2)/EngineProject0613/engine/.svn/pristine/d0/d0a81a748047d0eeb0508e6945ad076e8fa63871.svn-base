#pragma once
#include <glad/glad.h>

#include <glm/glm.hpp>
using namespace std;
#include <iostream>
#include<string>
#include<vector>
#include <module.h>
//render help functiions :
void checkCompileErrors(GLuint shader, std::string type)
{
	GLint success;
	GLchar infoLog[1024];
	if (type != "PROGRAM")
	{
		glGetShaderiv(shader, GL_COMPILE_STATUS, &success);
		if (!success)
		{
			glGetShaderInfoLog(shader, 1024, NULL, infoLog);
			std::cout << "ERROR::SHADER_COMPILATION_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
		}
	}
	else
	{
		glGetProgramiv(shader, GL_LINK_STATUS, &success);
		if (!success)
		{
			glGetProgramInfoLog(shader, 1024, NULL, infoLog);
			std::cout << "ERROR::PROGRAM_LINKING_ERROR of type: " << type << "\n" << infoLog << "\n -- --------------------------------------------------- -- " << std::endl;
		}
	}
}

unsigned create_shader(const char* vs,const char* fs)
{
	unsigned int ID;
	unsigned int vertex, fragment;
	vertex = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertex, 1, &vs, NULL);
	glCompileShader(vertex);
	checkCompileErrors(vertex, "VERTEX");
	// fragment Shader
	fragment = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragment, 1, &fs, NULL);
	glCompileShader(fragment);
	checkCompileErrors(fragment, "FRAGMENT");
	// if geometry shader is given, compile geometry shader
	//unsigned int geometry;
	//if (geometryPath != nullptr)
	//{
	//	const char * gShaderCode = geometryCode.c_str();
	////	geometry = glCreateShader(GL_GEOMETRY_SHADER);
	//	glShaderSource(geometry, 1, &gShaderCode, NULL);
	//	glCompileShader(geometry);
	//	checkCompileErrors(geometry, "GEOMETRY");
	//}
	// shader Program
	ID = glCreateProgram();
	glAttachShader(ID, vertex);
	glAttachShader(ID, fragment);
	/*if (geometryPath != nullptr)
	glAttachShader(ID, geometry);*/
	glLinkProgram(ID);
	checkCompileErrors(ID, "PROGRAM");
	// delete the shaders as they're linked into our program now and no longer necessery
	glDeleteShader(vertex);
	glDeleteShader(fragment);
	return ID;
}




void use(unsigned int ID)
{
	glUseProgram(ID);
	//helper->u_s_func(ID);
	glEnable(GL_DEPTH_TEST);
	glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
}
// utility uniform functions
// ------------------------------------------------------------------------
void setBool(unsigned int ID,const std::string &name, bool value) 
{
	//helper->s_s_bool_func(name, value);
	glUniform1i(glGetUniformLocation(ID, name.c_str()), (int)value);
}
// ------------------------------------------------------------------------
void setInt(unsigned int ID, const std::string &name, int value) 
{
	//helper->s_s_int_func(name, value);
	glUniform1i(glGetUniformLocation(ID, name.c_str()), value);
}
// ------------------------------------------------------------------------
void setFloat(unsigned int ID, const std::string &name, float value) 
{
	glUniform1f(glGetUniformLocation(ID, name.c_str()), value);
}
// ------------------------------------------------------------------------
void setVec2_2(unsigned int ID, const std::string &name, const glm::vec2 &value) 
{
	glUniform2fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
}
void setVec2(unsigned int ID, const std::string &name, float x, float y) 
{
	glUniform2f(glGetUniformLocation(ID, name.c_str()), x, y);
}
// ------------------------------------------------------------------------
void setVec3_2(unsigned int ID, const std::string &name, const glm::vec3 &value) 
{
	glUniform3fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
}
void setVec3(unsigned int ID, const std::string &name, float x, float y, float z) 
{

	glUniform3f(glGetUniformLocation(ID, name.c_str()), x, y, z);
}


// ------------------------------------------------------------------------
void setVec4_2(unsigned int ID, const std::string &name, const glm::vec4 &value) 
{
	glUniform4fv(glGetUniformLocation(ID, name.c_str()), 1, &value[0]);
}
void setVec4(unsigned int ID, const std::string &name, float x, float y, float z, float w)
{
	glUniform4f(glGetUniformLocation(ID, name.c_str()), x, y, z, w);
}
// ------------------------------------------------------------------------
void setMat2(unsigned int ID, const std::string &name, const glm::mat2 &mat) 
{
	glUniformMatrix2fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
}
// ------------------------------------------------------------------------
void setMat3(unsigned int ID, const std::string &name, const glm::mat3 &mat) 
{
	glUniformMatrix3fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
}
// ------------------------------------------------------------------------
void setMat4(unsigned int ID, const std::string &name, const glm::mat4 &mat) 
{
	glUniformMatrix4fv(glGetUniformLocation(ID, name.c_str()), 1, GL_FALSE, &mat[0][0]);
}


int get_vs_shader_UniformPos_func(unsigned int ID, const char* name) 
{
	int pos = glGetUniformLocation(ID, name);
	return pos;
}

unsigned int gen_gpu_texture(unsigned char *data, int width, int height, int nrComponents)
{
	unsigned int textureID;
	//unsigned int textureID;
	glGenTextures(1, &textureID);
	if (data)
	{
		GLenum format;
		/*if (nrComponents == 1)
		format = GL_RED;*/
		/*else*/ if (nrComponents == 3)
			format = GL_RGB;
		else if (nrComponents == 4)
			format = GL_RGBA;

		glBindTexture(GL_TEXTURE_2D, textureID);
		glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, format, GL_UNSIGNED_BYTE, data);
		glGenerateMipmap(GL_TEXTURE_2D);

		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	}
	return textureID;
}

int bind_gpu_texture(int textureId)
{
	glBindTexture(GL_TEXTURE_2D, textureId);
	return 0;
}

int get_fs_uniform_pos(int shaderId, const char* name)
{
	return glGetUniformLocation(shaderId, name);
}

int link_fs_uniform(int pos, int x)
{
	glUniform1i(pos, x);
	return 0;
}

int active_texture(int i)
{
	glActiveTexture(GL_TEXTURE0 + i);
	return 0;
}



int get_point_property(unsigned int id, const char* name)
{
	return glGetAttribLocation(id, name);
}

void gen_point_buf(unsigned int &VBOid, unsigned int &EBOid, vector<Vertex>& vertices, vector<unsigned short>& indices)
{

	glGenBuffers(1, &VBOid);
	glGenBuffers(1, &EBOid);

	//glBindVertexArray(VAO);
	// load data into vertex buffers
	glBindBuffer(GL_ARRAY_BUFFER, VBOid);
	// A great thing about structs is that their memory layout is sequential for all its items.
	// The effect is that we can simply pass a pointer to the struct and it translates perfectly to a glm::vec3/2 array which
	// again translates to 3/2 floats which translates to a byte array.
	glBufferData(GL_ARRAY_BUFFER, vertices.size() * sizeof(Vertex), &vertices[0], GL_STATIC_DRAW);

	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBOid);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, indices.size() * sizeof(unsigned short), &indices[0], GL_STATIC_DRAW);
}


void bind_pont_vboebobuf(unsigned int VBOid, unsigned int EBOid)
{
	glBindBuffer(GL_ARRAY_BUFFER, VBOid);


	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBOid);
}

void push_point_property(int pos, int size, int stride, const void*ptr)
{
	glEnableVertexAttribArray(pos);
	glVertexAttribPointer(pos, size, GL_FLOAT, GL_FALSE, stride, ptr);
}


void draw_element(int indices_size)
{
	glDrawElements(GL_TRIANGLES, indices_size, GL_UNSIGNED_SHORT, 0);
}